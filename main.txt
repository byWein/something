Ver='1.0'
Release_date = '03/17/2024'
Slogan = '‚ö°Ô∏èFAST SCRIPT‚ö°Ô∏è by Wein¬Æ.'
generated_script_title = 'üÖ∞Ô∏è  AUTOSTASH GO v.'..Ver..'  üÖ∞Ô∏è'
Compatible = ''--'64bit / 32bit / Original & Mod compatible.'
Mentions = 'ü©∂ THANKS TO ALL LDOE AGA CHANNEL MEMBERS ü©∂'
Features = '- All season decorations added.\n- All extremly rare bike skins added.\n- Other functional updates.'
TB = gg.makeRequest("https://raw.githubusercontent.com/byWein/something/main/TABLES.txt").content
AD = gg.makeRequest("http://worldtimeapi.org").content
PS = gg.makeRequest("https://pastebin.com/raw/KRG9XirW").content
Expiry_date = tonumber(PS)
RD = string.gsub(string.sub(AD,string.find(AD,"%d%d%d%d%-%d%d%-%d%d")),"-","")
Yr = string.sub(RD,1,4)
Mn = string.sub(RD,5,6)
Dy = string.sub(RD,7,8)
DT = string.format("%02d / %02d / %04d",Mn,Dy,Yr)
--======GET REMAINIG DAYS======
EYr = string.sub(Expiry_date,1,4)
EMn = string.sub(Expiry_date,5,6)
EDy = string.sub(Expiry_date,7,8)
Ex_D = string.format("%02d/%02d/%04d",EMn,EDy,EYr)
DC = Expiry_date - tonumber(RD)
if DC <= 0 then Days_left = 0 else Days_left = DC end


check = gg.getTargetInfo()

function x64_check()
if check.x64 == true then
Pointer_range = '20'
Address_long = '0x14'
else
  Pointer_range = '12'
Address_long = '0xC'
end
end
x64_check()

function PUPPY_COIN_ALERT()

BG = 12
alertpuppy = gg.alert('1 COIN PUPPY GROW [ üü¢ ACTIVATED ]','\n‚¨ÖÔ∏è MAIN MENU')
if alertpuppy == nil then gg.setVisible(false) else gg.setVisible(false) end
if alertpuppy == 1 then MAIN_MENU() end
end

function PUPPY_1_COIN()
ANTI_SPY()
gg.searchNumber(72,gg.TYPE_DOUBLE)
ANTI_SPY()
gg.getResults(gg.getResultsCount())
ANTI_SPY()
gg.editAll(0,gg.TYPE_DOUBLE)
ANTI_SPY()
gg.clearResults()
ANTI_SPY()
PUPPY_COIN_ALERT() --]]
end

function STASH_FIX()
Main_go = true
Stash_fix = true
gg.clearList()
Method = 1
GO("Q000000\"dota_gacha_furniture_set\" 0000",gg.REGION_ANONYMOUS,gg.TYPE_BYTE)
Method = 2
GO("Q000000\"resource_fiber\" 0000",gg.REGION_ANONYMOUS,gg.TYPE_BYTE)
gg.clearList()

STASH_FIX_SUCCESS()
end

function AUTOSTASH()
Main_go = true
Auto = true
Method = 1
gg.clearList()
gg.clearResults()
--rope
GO("Q000000\"resource_rope\" 0000",gg.REGION_ANONYMOUS,gg.TYPE_BYTE)
--fiber
GO("Q000000\"resource_fiber\" 0000",gg.REGION_ANONYMOUS,gg.TYPE_BYTE)
--cloth
GO("Q000000\"resource_cloth\" 0000",gg.REGION_ANONYMOUS,gg.TYPE_BYTE)
--scrap
GO("Q000000\"resource_metalscraps\" 0000",gg.REGION_ANONYMOUS,gg.TYPE_BYTE)
--duct
GO("Q000000\"duct_tape\" 0000",gg.REGION_ANONYMOUS,gg.TYPE_BYTE)
--leather
GO("Q000000\"resource_leather\" 0000",gg.REGION_ANONYMOUS,gg.TYPE_BYTE)

AUTOSTASH_SUCCESS()
end

function AUTOSTASH_SUCCESS()
BG = 7
Success_message = gg.alert('üÖ∞Ô∏è  AUTO STASH  üÖ∞Ô∏è  üëâ  ‚úÖÔ∏è SUCCESS ‚úÖÔ∏è \n \nROPE - FIBER - CLOTH - SCRAP - DUCT TAPE - LEATHER\n \nüëÜARE READY TO BE REPLACED üëÜ  ', 'üîÑ GO TO REPLACEMENT MENU', nil ,'‚¨ÖÔ∏è MAIN MENU')
if Success_message == nil then
elseif Success_message == 3 then MAIN_MENU()
elseif
  Success_message == 1 then REPLACEMENT()
end
Auto = false
Main_go = false
end

function STASH_FIX_SUCCESS()
BG = 8
Success_message = gg.alert('üõ†  FIX STASH MAKING PACK  üõ†  üëâ  ‚úÖÔ∏è SUCCESS ‚úÖÔ∏è \n\n NOW JUST RESTART THE GAME PLEASE.  ', '‚õîÔ∏è EXIT')
if Success_message == nil then
elseif
  Success_message == 1 then EXIT()
end
Stash_fix = false
Main_go = false
end

function STASH_FIX_ALERT()
BG = 9
Success_message = gg.alert('‚ö†Ô∏è   IMPORTANT NOTE   ‚ö†Ô∏è\n\nAFTER FIXING THE STASH MAKING PACK YOU MUST RESTART THE GAME !!\n\nIF YOU AGREE CLICK ON "START THE FIX" ', 'üîÑ START THE FIX', nil ,'‚¨ÖÔ∏è MAIN MENU')
if Success_message == nil then gg.setVisible(false) else gg.setVisible(false) end
if Success_message == 3 then MAIN_MENU() end
if Success_message == 1 then STASH_FIX() end
end

function AUTOSTASH_ALERT()
BG = 10
Success_message = gg.alert('‚ö†Ô∏è   IMPORTANT NOTE   ‚ö†Ô∏è\n\nüÖ∞Ô∏è AUTO STASH üÖ∞Ô∏è IS FOR REPLACING ALL THE COMPENETS OF THE STASH MAKING PACK ! \n\nAFTER THIS ACTION:\n\nROPE, FIBER, CLOTH, SCRAPS, DUCT TAPE AND LEATHER\n\nWILL BE READY FOR REPLACEMENT.', 'üÖ∞Ô∏è START AUTO STASH', nil ,'‚¨ÖÔ∏è MAIN MENU')
if Success_message == nil then gg.setVisible(false) else gg.setVisible(false) end
if Success_message == 3 then MAIN_MENU() end
if Success_message == 1 then AUTOSTASH() end
end

function SUCCESS_MESSAGE()
gg.setVisible(false)
BG = 5
if Save_skill == true then
Success_text = 'üíæ Dog Skill Successfully Saved ‚úÖÔ∏è\n\n'
Success_text_2 = ''
Go_to = nil
Back_to_menu = '\n‚¨ÖÔ∏è Main Menu'
Stay = '\n‚ôªÔ∏è Replace Another Skill'
end
if Method == 1 then
if Is_dog[sub_menu] == 'true' then
Dog = true
Success_text = 'üëá Dog Skill Successfully Pointed ‚úÖÔ∏è\n\n'
Success_text_2 = '\n\n‚ùïÔ∏è Now choose the new skill üëá üëá'
Go_to = ''
Back_to_menu = '\nüö´ Cancel'
Stay = '\nüêï Choose The New Skill üêï'
else
  Success_text = 'üëá Item Successfully Pointed ‚úÖÔ∏è\n\n'
Success_text_2 = '\n\n‚ùïÔ∏è Now Replace or point another item.\n\n(Previous pointed item will not be deleted)'
Go_to = '\n‚ôªÔ∏è Replace'
Back_to_menu = '\n‚¨ÖÔ∏è Main Menu'
Stay = '\nüëâ Point Another'
end end
if Method == 2 and Save_skill ~= true then
if Is_dog[sub_menu] == 'true' then
Success_text = '‚ôªÔ∏è Dog skill Successfully Replaced ‚úÖÔ∏è \n\n'
Success_text_2 = '\n\n‚ùïÔ∏è Now click on \"üôà Hide Script\" and move the dog\n\n‚ùïÔ∏è then comeback here and click \"üíæ Save Skill\"'
Go_to = '\nüôà Hide Script'
Back_to_menu = nil
Stay = '\nüíæ Save Skill'
else
  Success_text = '‚ôªÔ∏è Item Successfully Replaced ‚úÖÔ∏è\n\n'
Success_text_2 = ' '
Go_to = '\n1Ô∏è‚É£ Step one'
Back_to_menu = '\n‚¨ÖÔ∏è Main Menu'
Stay = '\n‚ôªÔ∏è Stay'
end end

if Is_sub[item_menu] == 'true' then
Item_selected = Sub_item_name[Sub_item_menu]
else
  Item_selected = Item_name[item_menu]
end

Success_message = gg.alert(Success_text ..Item_selected..'  üîπÔ∏è' .. Success_text_2 ,Stay, Go_to , Back_to_menu)
if Success_message == nil then
--==========DOG SKILL NAVIGATION=================--
------- REPLACE ANOTHER SKILL BUTTON -------
elseif Success_message == 1 and Save_skill == true
then RESET() Method = 1 ITEMS()
--------------------------------------
------- AFTER SAVING MAIN MENU BUTTON -------
elseif Success_message == 3 and Method == 2 and Save_skill == true
then RESET() MAIN_MENU()
--------------------------------------
elseif Success_message == 1 and Method == 1 and Dog == true
then Method = 2 ITEMS()
------- CANCEL SKILL OPERATION -------
elseif Success_message == 3 and Method == 1 and Dog == true
then RESET() MAIN_MENU()
--------------------------------------
------- HIDE MESSAGE AT SKILL SAVING -------
elseif Success_message == 2 and Method == 2 and Dog == true
then gg.setVisible(false)
--------------------------------------
------- SKILL SAVING BUTTON -------
elseif Success_message == 1 and Method == 2 and Dog == true
then RECOVER_SKILL()
--------------------------------------
--==========ITEMS NAVIGATION=================--
elseif Success_message == 1 and Method == 1
then Method = 1 POINT_REPLACE()
elseif Success_message == 2 and Method == 1
then Method = 2 POINT_REPLACE()
elseif Success_message == 3 and Method == 1
then MAIN_MENU()
elseif Success_message == 1 and Method == 2
then if Is_sub[item_menu] == 'true' then Method = 2 SUB_ITEMS() else Method = 2 ITEMS() end
elseif Success_message == 2 and Method == 2
then Method = 1 POINT_REPLACE()
elseif Success_message == 3 and Method == 2
then MAIN_MENU()
end
end

function SUB_ITEMS()
LISTING()
BG = 13
CHECK_METHOD()
PAIRS_SUB_ITEMS()
gg.toast(Sub_item_menu_name[item_menu])
Sub_item_name[#Sub_item_name - #Sub_item_name] = '‚Ü©Ô∏è RETURN'
Sub_item_name[#Sub_item_name - #Sub_item_name -1] = '‚õîÔ∏è EXIT'
Sub_item_menu = gg.choice(Sub_item_name,nil,Sub_menu_name .. Item_menu_name[sub_menu]..Sub_item_menu_name[item_menu])
if Sub_item_menu == nil then
elseif Sub_item_menu == 0 then ITEMS()
elseif Sub_item_menu == - 1 then EXIT()
elseif Sub_item_menu == Sub_item_menu then GO()
end
end

function ITEMS()

LISTING()
BG = 4
CHECK_METHOD()
PARSING_ITEMS()
gg.toast(Item_menu_name[sub_menu])
Item_name[#Item_name - #Item_name] = '‚Ü©Ô∏è RETURN'
Item_name[#Item_name - #Item_name - 1] = '‚õîÔ∏è EXIT'
item_menu = gg.choice(Item_name,nil,Sub_menu_name..Item_menu_name[sub_menu])
if item_menu == nil then
elseif item_menu == 0 then POINT_REPLACE()
elseif item_menu == -1 then EXIT()
elseif item_menu == item_menu then
if Is_sub[item_menu] == 'true' then SUB_ITEMS()
elseif item_menu == item_menu then GO() end
end end

function RETURN()
if mm == 1 then MAIN_MENU() end
if mm == 2 then mm = 1 POINT_REPLACE() end
if mm == 3 then mm = 2 POINT_REPLACE() end
end

function POINT_REPLACE()
LISTING()
BG = 3
CHECK_METHOD()
PARSING_POINT_REPLACE()
gg.toast(Sub_menu_name)
Parent_name[#Parent_name - #Parent_name] = '‚Ü©Ô∏è RETURN'
Parent_name[#Parent_name - #Parent_name - 10] = '‚õîÔ∏è EXIT'
sub_menu = gg.choice(Parent_name , nil , Sub_menu_name)
if sub_menu == nil then
elseif sub_menu == 0 then MAIN_MENU()
elseif sub_menu == -10 then EXIT()
elseif sub_menu == sub_menu then ITEMS()
end
end


function MAIN_MENU()
List = '‚è∫Ô∏è    ' Sub = 'üîπÔ∏è 'Fold = 'üìÇ '
TABLES(List,Sub,Fold)
gg.toast('üìã MAIN MENU üìã')
Option_name = {}
for i , v in pairs(Main_menu_table) do
Option_name[i] = v.option_name
end
BG = 17
Option_name[#Option_name - #Option_name] = '‚õîÔ∏è EXIT'
main_menu = gg.choice(Option_name , nil,'üìã MAIN MENU üìã')
if main_menu == nil then
elseif main_menu == 1 then
Method = 1 POINT_REPLACE()
elseif main_menu == 2 then
Method = 2 POINT_REPLACE()
elseif main_menu == 3 then
AUTOSTASH_ALERT()
elseif main_menu == 4 then
STASH_FIX_ALERT()
elseif main_menu == 5 then
PUPPY_1_COIN()
elseif main_menu == 6 then
OPTIONS_MENU()
elseif main_menu == 7 then
ABOUT_SCRIPT()
elseif main_menu == 0 then
EXIT()
end
end

function CHECK_METHOD()
if Method == 1 then
Sub_menu_name = '1Ô∏è‚É£ STEP ONE üëâ  '
elseif Method == 2 then
Sub_menu_name = '2Ô∏è‚É£ STEP TWO ‚ôªÔ∏è  '
end
end

function LISTING()
if Method == 1 then
List = 'üëâ    '
elseif Method == 2 then
List = '‚ôªÔ∏è    '
end
TABLES(List,Sub,Fold)
end

function PARSING_ITEMS()
Item_name = {}
Item_code = {}
Item_region = {}
Item_type = {}
Sub_item_menu_name = {}
Is_sub = {}
for i , v in pairs(Items[sub_menu]) do
Item_name[i] = v.item_name
Item_code[i] = v.item_code
Item_region[i] = v.item_region
Item_type[i] = v.item_type
Sub_item_menu_name[i] = v.sub_item_menu_name
Is_sub[i] = v.is_sub
end
end

function PARSING_POINT_REPLACE()
Item_menu_name = {}
Parent_name = {}
Is_dog = {}
for i , v in pairs(Items) do
Item_menu_name[i] = v.item_menu_name
Parent_name[i] = v.parent_name
Is_dog[i] = v.is_dog
end
end

function PAIRS_SUB_ITEMS()
Sub_item_name = {}
Sub_item_code = {}
Sub_item_region = {}
Sub_item_type = {}
for i , v in pairs(Items[sub_menu][item_menu]) do
Sub_item_name[i] = v.item_name
Sub_item_code[i] = v.item_code
Sub_item_region[i] = v.item_region
Sub_item_type[i] = v.item_type
end
end

function CLEAR_DATA()
RESET()
Clean_alert = gg.alert('\nüßπ DATA SUCCESSFULLY CLEARED ‚úÖÔ∏è','‚úÖÔ∏è OK')
if Clean_alert == nil then gg.setVisible(false) else gg.setVisible(false) end
if Clean_alert == 1 then OPTIONS_MENU() end
end

--=======SEARCH REFINE===========
function GET_VALUES_SEARCH_REFINE(code,region,type)
if Main_go ~= true then
if code == nil and Is_sub[item_menu] == 'true' then
code = Sub_item_code[Sub_item_menu]
region = Sub_item_region[Sub_item_menu]
type = Sub_item_type[Sub_item_menu]
Item_selected = Sub_item_name[Sub_item_menu]
elseif code == nil then
code = Item_code[item_menu]
region = Item_region[item_menu]
type = Item_type[item_menu]
Item_selected = Item_name[item_menu]
end else Item_selected = Option_name[main_menu] end
gg.clearResults()
ANTI_SPY()
gg.setRanges(region)
ANTI_SPY()
gg.toast(Item_selected..'  üîπÔ∏è' , true)
ANTI_SPY()
gg.searchNumber(code, type , false, gg.SIGN_EQUAL, 0, -1, 0)
ANTI_SPY()
k = gg.getResults(1,3)
ANTI_SPY()
gg.refineNumber(k[1].value)
ANTI_SPY()
z = gg.getResults(gg.getResultsCount())
ANTI_SPY()
gg.clearResults()
ANTI_SPY()
end

function SEARCH_GET_POINTER()
ANTI_SPY()
gg.loadResults(z)
ANTI_SPY()
gg.getResults(gg.getResultsCount())
ANTI_SPY()
gg.searchPointer(Pointer_range)
ANTI_SPY()
Pointers = gg.getResultsCount()
ANTI_SPY()
if Main_go ~= true then
if Is_dog[sub_menu] == 'true' then
dp = gg.getResults((Pointers - math.floor(Pointers *0.1))-1)
ANTI_SPY()
gg.clearResults()
ANTI_SPY()
Skill_pointed = true
ANTI_SPY()
else
  MULTI_POINT()
ANTI_SPY()
dp = gg.getResults(Pointers)
ANTI_SPY()
gg.addListItems(dp)
ANTI_SPY()
gg.clearResults()
ANTI_SPY()
dp = gg.getListItems()
ANTI_SPY()
gg.clearList()
ANTI_SPY()
Item_pointed = true
end else
  dp = gg.addListItems(gg.getResults(Pointers))
Item_pointed = true
end
end
--============END============
function MULTI_POINT()
if Status == '[üî¥ OFF]' then
elseif Status == '[üü¢ ON]' then
gg.addListItems(dp)
end
end

function OPTIONS_MENU()
if Status == nil then Status = '[üî¥ OFF]' end
BG = 16
Option_menu = gg.choice({
  '‚è∫Ô∏è   üìç MULTI-POINTING'..' '..Status,
  '‚è∫Ô∏è   üßπ CLEAR DATA',
  '‚¨ÖÔ∏è Return To Main Menu'
}
  ,nil,'‚öôÔ∏è OPTIONS MENU ‚öôÔ∏è')
if Option_menu == nil then
elseif Option_menu == 1 then
if Status == '[üî¥ OFF]' then Status = '[üü¢ ON]'
OPTIONS_MENU()
else Status = '[üî¥ OFF]' OPTIONS_MENU() end
elseif Option_menu == 2 then CLEAR_DATA()
elseif Option_menu == 3 then MAIN_MENU()
end
end
--=======DO REPLACEMENT===========
function REPLACE_POINTER()
ANTI_SPY()
gg.loadResults(z)
ANTI_SPY()
a = gg.getResults(1)
ANTI_SPY()
gg.clearResults()
ANTI_SPY()
t = {}
t[1] = {}
t[1].address = a[1].address - Address_long
t[1].flags = 4, gg.TYPE_DWORD
t = t[1].address
gg.addListItems(dp)
ANTI_SPY()
local r = gg.getListItems()
ANTI_SPY()
gg.clearList()
ANTI_SPY()
for i, v in pairs(r) do
r[i].value = t
r[i].freeze = false
end
gg.addListItems(dp)
ANTI_SPY()
gg.setValues(r)
mp = gg.getListItems()
ANTI_SPY()
gg.clearList()
ANTI_SPY()
end
--============END============
--=======STOP UNWANTED ACTIONS===========
function FIRE_WALL()
redflag = false
if Method == 2 and Pointers == nil then redflag = true end
if Method == 2 then
if Main_go ~= true then
if Is_dog[sub_menu] == 'true' and Item_pointed == true then redflag = 'Item_with_skill' end
if Is_dog[sub_menu] ~= 'true' and Skill_pointed == true then redflag = 'Skill_with_item' end
end end end
--===========END=============
function GO(code,region,type)
if Is_sub[item_menu] == 'true' then
List = ''
TABLES(List,Sub,Fold)
PAIRS_SUB_ITEMS()
else
  List = ''
TABLES(List,Sub,Fold)
PARSING_ITEMS()
end
FIRE_WALL()
if redflag == false then
GET_VALUES_SEARCH_REFINE(code,region,type)
if Method == 1 then
SEARCH_GET_POINTER()
elseif Method == 2 then
REPLACE_POINTER()
end
gg.toast('‚úÖÔ∏è Success ‚úÖÔ∏è')
SEARCH_NOTIFY()
else STOP() end
end

function RECOVER_SKILL()
gg.loadResults(mp)
ANTI_SPY()
gg.setValues(dp)
ANTI_SPY()
RESET()
Save_skill = true
SUCCESS_MESSAGE()
end

function SEARCH_NOTIFY()
if Main_go ~= true then
SUCCESS_MESSAGE()
end
end

function STOP()
gg.setVisible(false)
BG = 11
if Pointers == nil then
Stop_tittle = 'ü§∑ NOTHING POINTED ü§∑'
Stop_txt_1 = 'üí° Tip:\n\n- Use \"1Ô∏è‚É£ Step One üëâ\" to point an item.'
Stop_txt_2 = '- Use \'2Ô∏è‚É£ Step Two ‚ôªÔ∏è\' to replace the pointed item.'
Button_1 = '1Ô∏è‚É£ Step One üëâ'
Button_2 = ''
Button_3 = '‚¨ÖÔ∏è Main Menu'
else
  Stop_tittle = '‚ö†Ô∏è Attempt to Replace an Item with Dog Skill ‚ö†Ô∏è'
Stop_txt_1 = '‚ùïÔ∏è If you replace an item with a dog skill you risk to lose your data!'
Stop_txt_2 = ''
Button_1 = '‚úÖÔ∏è I UNDERSTAND'
Button_2 = ''
Button_3 = '‚¨ÖÔ∏è Main Menu'
end
stop_msg = gg.alert(Stop_tittle..'\n\n'..Stop_txt_1..'\n\n'..Stop_txt_2,'\n'..Button_1,Button_2,'\n'..Button_3)
if stop_msg == nil then
elseif Pointers == nil then
---======= NO POINTING BUTTONS =========
if stop_msg == 1 then Method = 1 POINT_REPLACE() end
if stop_msg == 2 then end
if stop_msg == 3 then MAIN_MENU() end
---=====================================
else
---======= ITEM SKILL BUTTONS =========
  if stop_msg == 1 then POINT_REPLACE() end
if stop_msg == 2 then end
if stop_msg == 3 then MAIN_MENU() end
---=====================================
end
end

function ANTI_SPY()
if gg.isVisible() == true then
while true do
gg.clearList()
gg.clearResults()
gg.setVisible(false)
Block_spy = gg.alert('üìõ Spying Attempt Detected üìõ\n\n‚ùïÔ∏è I am a shy script ‚ò∫Ô∏è I can\'t work when you\'r looking üßê\n\nüí° If you need any code please contact us:\n - Telegram: t.me\\WeinHacks\n - Telegram channel: t.me\\agasatriya1\n\nmade with üíô by Wein¬Æ', '\n‚õîÔ∏è Exit')
if Block_spy == nil then EXIT() else EXIT() end
if Block_spy == 1 then EXIT() end
end
end 
end

function RESET()
gg.clearResults()
gg.clearList()
Item_pointed = false --- used in firewall
Skill_pointed = false ---- used in firewall
Pointers = nil
z = {} dp = {} mp = {}
Main_go = false
AUTO = false
Stash_fix = false
Dog = false
Save_skill = false
end

function ABOUT_SCRIPT()
gg.toast('üÖ∞Ô∏è  AUTO STASH '..Ver..' üÖ∞Ô∏è',true)
gg.setVisible(false)
BG = 15
if tonumber(RD) < Expiry_date then
License = true
License_info = 'License: üü© Valid until '..Ex_D..' ( '..Days_left..' Days remaining )'
gg.toast('üü© Valid License üü©',true)
Button_about = 'CONTINUE ‚û°Ô∏è'
elseif tonumber(RD) >= Expiry_date or tonumber(RD) == nil then
License = false
License_info = 'License: üü• Expired on '..Ex_D..' ( '..Days_left..' Days remaining )'
gg.toast('üü• License Expired üü•',true)
Button_about = '‚õîÔ∏è EXIT'
end
gg.toast('üÖ∞Ô∏è  AUTO STASH '..Ver..' üÖ∞Ô∏è',true)
About_message = gg.alert(generated_script_title..' '..Slogan..'\n\n'..License_info..'\n'..Compatible..'\n\n'..Mentions..'\n\n'..'Whats new in version '..Ver..' (Released on '..Release_date..'):\n'..Features,Button_about)
if About_message == nil then gg.setVisible(false) else gg.setVisible(false) end
if License == true then
if About_message == 1 then MAIN_MENU() end
end
if License == false then
if About_message == 1 then EXIT() end
end
end

function TABLES_GO()
mainfile = io.open(' ' , 'w')
mainfile:write(TB)
mainfile:close()
mainfile = io.open(' ' , 'r')
text1 = mainfile:read('*all')
dofile(' ')
mainfile:close()
os.remove(' ')
ABOUT_SCRIPT()
end

function EXIT_ENTER_CODE()
gg.setVisible(false)
BG = 20
exit_script = gg.alert('\n‚ö†Ô∏è ARE SURE YOU WANT TO EXIT SCRIPT ? ‚ö†Ô∏è\n','‚¨áÔ∏è STAY & SHOW CODE' ,nil,'‚õîÔ∏è EXIT')
if exit_script == nil then
elseif exit_script == 1 then H_VR()
elseif exit_script == 3 then EXIT()
end end

function EMPTY_WRONG()
BG = 21
gg.setVisible(false)
VR_out = gg.alert('üìõ EMPTY OR WRONG CODE üìõ\n\n‚ùïÔ∏èFogot your code ?! click on \" #Ô∏è‚É£ SHOW CODE \".\n\n‚ùïÔ∏èOr just \" ‚õîÔ∏è EXIT \".','#Ô∏è‚É£ SHOW CODE',nil,'‚õîÔ∏è EXIT')
if VR_out == nil then
elseif VR_out == 1 then H_VR()
elseif VR_out == 3 then EXIT()
end end

function ENTER_CODE()
BG = 19
gg.setVisible(false)
VR = gg.prompt(
  {
    'ü§ñ HUMAN VERIFICATION ü§ñ\n\nüëá INTER VERIFICATION CODE üëá'
  },
  {
    ''
  }, {
    'text'
  })
if VR == nil then
EXIT_ENTER_CODE()
elseif VR[1] == Zyx then
gg.toast('‚è≥Ô∏è Checking License ‚è≥Ô∏è',true)
TABLES_GO()
elseif VR[1] ~= Zyx then
EMPTY_WRONG()
end end

function H_VR()
gg.setVisible(false)
BG = 18
H_vr = gg.alert('ü§ñ HUMAN VERIFICATION ü§ñ\n\nREMEMBER THIS CODE üëâ üìç '..Zyx..' üìç\n\nClick Verify and Enter The Code.','‚ÑπÔ∏è VERIFY',nil,'‚õîÔ∏è EXIT')
if H_vr == nil then
elseif H_vr == 1 then ENTER_CODE()
elseif H_vr == 3 then EXIT() end
end
H_VR()

function CURRENT_TAB()
if BG == 15 then ABOUT_SCRIPT()
gg.toast('üôà Hidden üôà')
elseif
  BG == 17 then MAIN_MENU()
gg.toast('üôà Hidden üôà',true)
elseif
  BG == 3 then POINT_REPLACE()
gg.toast('üôà Hidden üôà')
elseif
  BG == 4 then ITEMS()
gg.toast('üôà Hidden üôà')
elseif
  BG == 5 then SUCCESS_MESSAGE()
gg.toast('üôà Hidden üôà')
elseif
  BG == 6 then SUB_PARENT()
gg.toast('üôà Hidden üôà')
elseif
  BG == 7 then AUTOSTASH_SUCCESS()
gg.toast('üôà Hidden üôà')
elseif
  BG == 8 then STASH_FIX_SUCCESS()
gg.toast('üôà Hidden üôà')
elseif
  BG == 9 then STASH_FIX_ALERT()
gg.toast('üôà Hidden üôà')
elseif
  BG == 10 then AUTOSTASH_ALERT()
gg.toast('üôà Hidden üôà')
elseif
  BG == 11 then STOP()
gg.toast('üôà Hidden üôà')
elseif
  BG == 12 then PUPPY_COIN_ALERT()
gg.toast('üôà Hidden üôà')
elseif
  BG == 13 then SUB_ITEMS()
gg.toast('üôà Hidden üôà')
elseif
  BG == 14 then NO_POINTING()
gg.toast('üôà Hidden üôà')
elseif
  BG == 16 then OPTIONS_MENU()
gg.toast('üôà Hidden üôà')
elseif
  BG == 18 then H_VR()
gg.toast('üôà Hidden üôà')
elseif
  BG == 19 then ENTER_CODE()
gg.toast('üôà Hidden üôà')
elseif
  BG == 20 then EXIT_ENTER_CODE()
gg.toast('üôà Hidden üôà')
elseif
  BG == 21 then EMPTY_WRONG()
gg.toast('üôà Hidden üôà')
end
end

while true do
if gg.isVisible() then
gg.setVisible(false)
CURRENT_TAB()
end
end






